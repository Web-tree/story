syntax = "proto3";
package webtree.story.story;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "story/params.proto";
import "story/event.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/web-tree/story/x/story/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/webtree/story/story/params";
  }
  // Queries a Event by id.
	rpc Event(QueryGetEventRequest) returns (QueryGetEventResponse) {
		option (google.api.http).get = "/web-tree/story/story/event/{id}";
	}

	// Queries a list of Event items.
	rpc EventAll(QueryAllEventRequest) returns (QueryAllEventResponse) {
		option (google.api.http).get = "/web-tree/story/story/event";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetEventRequest {
	uint64 id = 1;
}

message QueryGetEventResponse {
	Event Event = 1 [(gogoproto.nullable) = false];
}

message QueryAllEventRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllEventResponse {
	repeated Event Event = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
