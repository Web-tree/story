// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: story/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateEvent struct {
	Creator   string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	GiverId   string `protobuf:"bytes,2,opt,name=giverId,proto3" json:"giverId,omitempty"`
	TakerId   string `protobuf:"bytes,3,opt,name=takerId,proto3" json:"takerId,omitempty"`
	GiverSign string `protobuf:"bytes,4,opt,name=giverSign,proto3" json:"giverSign,omitempty"`
	TakerSign string `protobuf:"bytes,5,opt,name=takerSign,proto3" json:"takerSign,omitempty"`
	UnionId   string `protobuf:"bytes,6,opt,name=unionId,proto3" json:"unionId,omitempty"`
	TypeId    string `protobuf:"bytes,7,opt,name=typeId,proto3" json:"typeId,omitempty"`
	Body      string `protobuf:"bytes,8,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *MsgCreateEvent) Reset()         { *m = MsgCreateEvent{} }
func (m *MsgCreateEvent) String() string { return proto.CompactTextString(m) }
func (*MsgCreateEvent) ProtoMessage()    {}
func (*MsgCreateEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9206e9f0466d673, []int{0}
}
func (m *MsgCreateEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateEvent.Merge(m, src)
}
func (m *MsgCreateEvent) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateEvent proto.InternalMessageInfo

func (m *MsgCreateEvent) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateEvent) GetGiverId() string {
	if m != nil {
		return m.GiverId
	}
	return ""
}

func (m *MsgCreateEvent) GetTakerId() string {
	if m != nil {
		return m.TakerId
	}
	return ""
}

func (m *MsgCreateEvent) GetGiverSign() string {
	if m != nil {
		return m.GiverSign
	}
	return ""
}

func (m *MsgCreateEvent) GetTakerSign() string {
	if m != nil {
		return m.TakerSign
	}
	return ""
}

func (m *MsgCreateEvent) GetUnionId() string {
	if m != nil {
		return m.UnionId
	}
	return ""
}

func (m *MsgCreateEvent) GetTypeId() string {
	if m != nil {
		return m.TypeId
	}
	return ""
}

func (m *MsgCreateEvent) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

type MsgCreateEventResponse struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgCreateEventResponse) Reset()         { *m = MsgCreateEventResponse{} }
func (m *MsgCreateEventResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateEventResponse) ProtoMessage()    {}
func (*MsgCreateEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9206e9f0466d673, []int{1}
}
func (m *MsgCreateEventResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateEventResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateEventResponse.Merge(m, src)
}
func (m *MsgCreateEventResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateEventResponse proto.InternalMessageInfo

func (m *MsgCreateEventResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgUpdateEvent struct {
	Creator   string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id        uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	GiverId   string `protobuf:"bytes,3,opt,name=giverId,proto3" json:"giverId,omitempty"`
	TakerId   string `protobuf:"bytes,4,opt,name=takerId,proto3" json:"takerId,omitempty"`
	GiverSign string `protobuf:"bytes,5,opt,name=giverSign,proto3" json:"giverSign,omitempty"`
	TakerSign string `protobuf:"bytes,6,opt,name=takerSign,proto3" json:"takerSign,omitempty"`
	UnionId   string `protobuf:"bytes,7,opt,name=unionId,proto3" json:"unionId,omitempty"`
	TypeId    string `protobuf:"bytes,8,opt,name=typeId,proto3" json:"typeId,omitempty"`
	Body      string `protobuf:"bytes,9,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *MsgUpdateEvent) Reset()         { *m = MsgUpdateEvent{} }
func (m *MsgUpdateEvent) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateEvent) ProtoMessage()    {}
func (*MsgUpdateEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9206e9f0466d673, []int{2}
}
func (m *MsgUpdateEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateEvent.Merge(m, src)
}
func (m *MsgUpdateEvent) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateEvent proto.InternalMessageInfo

func (m *MsgUpdateEvent) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateEvent) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgUpdateEvent) GetGiverId() string {
	if m != nil {
		return m.GiverId
	}
	return ""
}

func (m *MsgUpdateEvent) GetTakerId() string {
	if m != nil {
		return m.TakerId
	}
	return ""
}

func (m *MsgUpdateEvent) GetGiverSign() string {
	if m != nil {
		return m.GiverSign
	}
	return ""
}

func (m *MsgUpdateEvent) GetTakerSign() string {
	if m != nil {
		return m.TakerSign
	}
	return ""
}

func (m *MsgUpdateEvent) GetUnionId() string {
	if m != nil {
		return m.UnionId
	}
	return ""
}

func (m *MsgUpdateEvent) GetTypeId() string {
	if m != nil {
		return m.TypeId
	}
	return ""
}

func (m *MsgUpdateEvent) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

type MsgUpdateEventResponse struct {
}

func (m *MsgUpdateEventResponse) Reset()         { *m = MsgUpdateEventResponse{} }
func (m *MsgUpdateEventResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateEventResponse) ProtoMessage()    {}
func (*MsgUpdateEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9206e9f0466d673, []int{3}
}
func (m *MsgUpdateEventResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateEventResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateEventResponse.Merge(m, src)
}
func (m *MsgUpdateEventResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateEventResponse proto.InternalMessageInfo

type MsgDeleteEvent struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id      uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgDeleteEvent) Reset()         { *m = MsgDeleteEvent{} }
func (m *MsgDeleteEvent) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteEvent) ProtoMessage()    {}
func (*MsgDeleteEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9206e9f0466d673, []int{4}
}
func (m *MsgDeleteEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteEvent.Merge(m, src)
}
func (m *MsgDeleteEvent) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteEvent proto.InternalMessageInfo

func (m *MsgDeleteEvent) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDeleteEvent) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgDeleteEventResponse struct {
}

func (m *MsgDeleteEventResponse) Reset()         { *m = MsgDeleteEventResponse{} }
func (m *MsgDeleteEventResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteEventResponse) ProtoMessage()    {}
func (*MsgDeleteEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9206e9f0466d673, []int{5}
}
func (m *MsgDeleteEventResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteEventResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteEventResponse.Merge(m, src)
}
func (m *MsgDeleteEventResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteEventResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateEvent)(nil), "webtree.story.story.MsgCreateEvent")
	proto.RegisterType((*MsgCreateEventResponse)(nil), "webtree.story.story.MsgCreateEventResponse")
	proto.RegisterType((*MsgUpdateEvent)(nil), "webtree.story.story.MsgUpdateEvent")
	proto.RegisterType((*MsgUpdateEventResponse)(nil), "webtree.story.story.MsgUpdateEventResponse")
	proto.RegisterType((*MsgDeleteEvent)(nil), "webtree.story.story.MsgDeleteEvent")
	proto.RegisterType((*MsgDeleteEventResponse)(nil), "webtree.story.story.MsgDeleteEventResponse")
}

func init() { proto.RegisterFile("story/tx.proto", fileDescriptor_c9206e9f0466d673) }

var fileDescriptor_c9206e9f0466d673 = []byte{
	// 406 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcf, 0x6a, 0xfa, 0x40,
	0x10, 0xc7, 0x4d, 0x8c, 0x51, 0x57, 0x10, 0x7e, 0xfb, 0x03, 0x59, 0xa4, 0x84, 0x92, 0x1e, 0x2a,
	0x94, 0x46, 0x68, 0x6f, 0xbd, 0xf5, 0xdf, 0xc1, 0x83, 0x17, 0x4b, 0x2f, 0xbd, 0x88, 0x31, 0x43,
	0x1a, 0xda, 0x66, 0x43, 0xb2, 0xfe, 0x7b, 0x8b, 0x3e, 0x46, 0x1f, 0xa5, 0x47, 0x8f, 0x3d, 0x8a,
	0xbe, 0x40, 0x1f, 0xa1, 0xec, 0x6e, 0x62, 0x57, 0x48, 0xc4, 0x5e, 0x34, 0x33, 0xdf, 0xef, 0xce,
	0x30, 0x9f, 0xd9, 0x45, 0xcd, 0x84, 0xd1, 0x78, 0xd1, 0x65, 0x73, 0x27, 0x8a, 0x29, 0xa3, 0xf8,
	0xff, 0x0c, 0x5c, 0x16, 0x03, 0x38, 0x22, 0x2f, 0x7f, 0xdb, 0xff, 0xa4, 0x09, 0xa6, 0x10, 0x32,
	0xe9, 0xb3, 0x57, 0x1a, 0x6a, 0xf6, 0x13, 0xff, 0x36, 0x86, 0x11, 0x83, 0x7b, 0x2e, 0x60, 0x82,
	0xaa, 0x63, 0x1e, 0xd2, 0x98, 0x68, 0xc7, 0x5a, 0xa7, 0x3e, 0xc8, 0x42, 0xae, 0xf8, 0xc1, 0x14,
	0xe2, 0x9e, 0x47, 0x74, 0xa9, 0xa4, 0x21, 0x57, 0xd8, 0xe8, 0x45, 0x28, 0x65, 0xa9, 0xa4, 0x21,
	0x3e, 0x42, 0x75, 0x61, 0x7a, 0x08, 0xfc, 0x90, 0x18, 0x42, 0xfb, 0x4d, 0x70, 0x55, 0x18, 0x85,
	0x5a, 0x91, 0xea, 0x36, 0xc1, 0xab, 0x4e, 0xc2, 0x80, 0x86, 0x3d, 0x8f, 0x98, 0xb2, 0x6a, 0x1a,
	0xe2, 0x16, 0x32, 0xd9, 0x22, 0x82, 0x9e, 0x47, 0xaa, 0x42, 0x48, 0x23, 0x8c, 0x91, 0xe1, 0x52,
	0x6f, 0x41, 0x6a, 0x22, 0x2b, 0xbe, 0xed, 0x0e, 0x6a, 0xed, 0x4e, 0x38, 0x80, 0x24, 0xa2, 0x61,
	0x02, 0xb8, 0x89, 0xf4, 0xc0, 0x13, 0x43, 0x1a, 0x03, 0x3d, 0xf0, 0xec, 0x6f, 0x09, 0xe3, 0x31,
	0xf2, 0x0e, 0x80, 0x21, 0x0f, 0xeb, 0xd9, 0x61, 0x15, 0x4e, 0xb9, 0x10, 0x8e, 0xb1, 0x07, 0x4e,
	0x65, 0x2f, 0x1c, 0x73, 0x0f, 0x9c, 0x6a, 0x11, 0x9c, 0x5a, 0x2e, 0x9c, 0xba, 0x02, 0x87, 0x08,
	0x38, 0xca, 0xc4, 0x19, 0x1c, 0xfb, 0x4a, 0xb0, 0xb8, 0x83, 0x57, 0xf8, 0x33, 0x8b, 0xb4, 0xaa,
	0x72, 0x36, 0xab, 0x7a, 0xf1, 0xa1, 0xa3, 0x72, 0x3f, 0xf1, 0xf1, 0x10, 0x35, 0xd4, 0x3b, 0x77,
	0xe2, 0xe4, 0xdc, 0x57, 0x67, 0x77, 0x6d, 0xed, 0xb3, 0x03, 0x4c, 0xdb, 0xdd, 0x0e, 0x51, 0x43,
	0xdd, 0x63, 0x61, 0x03, 0xc5, 0x54, 0xdc, 0x20, 0x87, 0x0f, 0x6f, 0xa0, 0xc2, 0x29, 0x6c, 0xa0,
	0x98, 0x8a, 0x1b, 0xe4, 0xa0, 0xba, 0xb9, 0xfe, 0x5c, 0x5b, 0xda, 0x72, 0x6d, 0x69, 0xab, 0xb5,
	0xa5, 0xbd, 0x6f, 0xac, 0xd2, 0x72, 0x63, 0x95, 0xbe, 0x36, 0x56, 0xe9, 0xe9, 0xd4, 0x0f, 0xd8,
	0xf3, 0xc4, 0x75, 0xc6, 0xf4, 0xad, 0x3b, 0x03, 0xf7, 0x9c, 0x57, 0xec, 0xca, 0xb7, 0x3d, 0x4f,
	0xff, 0xf9, 0xca, 0x13, 0xd7, 0x14, 0x8f, 0xfc, 0xf2, 0x27, 0x00, 0x00, 0xff, 0xff, 0xda, 0x03,
	0x7f, 0xc3, 0x1e, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CreateEvent(ctx context.Context, in *MsgCreateEvent, opts ...grpc.CallOption) (*MsgCreateEventResponse, error)
	UpdateEvent(ctx context.Context, in *MsgUpdateEvent, opts ...grpc.CallOption) (*MsgUpdateEventResponse, error)
	DeleteEvent(ctx context.Context, in *MsgDeleteEvent, opts ...grpc.CallOption) (*MsgDeleteEventResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateEvent(ctx context.Context, in *MsgCreateEvent, opts ...grpc.CallOption) (*MsgCreateEventResponse, error) {
	out := new(MsgCreateEventResponse)
	err := c.cc.Invoke(ctx, "/webtree.story.story.Msg/CreateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateEvent(ctx context.Context, in *MsgUpdateEvent, opts ...grpc.CallOption) (*MsgUpdateEventResponse, error) {
	out := new(MsgUpdateEventResponse)
	err := c.cc.Invoke(ctx, "/webtree.story.story.Msg/UpdateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteEvent(ctx context.Context, in *MsgDeleteEvent, opts ...grpc.CallOption) (*MsgDeleteEventResponse, error) {
	out := new(MsgDeleteEventResponse)
	err := c.cc.Invoke(ctx, "/webtree.story.story.Msg/DeleteEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CreateEvent(context.Context, *MsgCreateEvent) (*MsgCreateEventResponse, error)
	UpdateEvent(context.Context, *MsgUpdateEvent) (*MsgUpdateEventResponse, error)
	DeleteEvent(context.Context, *MsgDeleteEvent) (*MsgDeleteEventResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateEvent(ctx context.Context, req *MsgCreateEvent) (*MsgCreateEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}
func (*UnimplementedMsgServer) UpdateEvent(ctx context.Context, req *MsgUpdateEvent) (*MsgUpdateEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEvent not implemented")
}
func (*UnimplementedMsgServer) DeleteEvent(ctx context.Context, req *MsgDeleteEvent) (*MsgDeleteEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvent not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webtree.story.story.Msg/CreateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateEvent(ctx, req.(*MsgCreateEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webtree.story.story.Msg/UpdateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateEvent(ctx, req.(*MsgUpdateEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webtree.story.story.Msg/DeleteEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteEvent(ctx, req.(*MsgDeleteEvent))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "webtree.story.story.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEvent",
			Handler:    _Msg_CreateEvent_Handler,
		},
		{
			MethodName: "UpdateEvent",
			Handler:    _Msg_UpdateEvent_Handler,
		},
		{
			MethodName: "DeleteEvent",
			Handler:    _Msg_DeleteEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "story/tx.proto",
}

func (m *MsgCreateEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.TypeId) > 0 {
		i -= len(m.TypeId)
		copy(dAtA[i:], m.TypeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TypeId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.UnionId) > 0 {
		i -= len(m.UnionId)
		copy(dAtA[i:], m.UnionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UnionId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TakerSign) > 0 {
		i -= len(m.TakerSign)
		copy(dAtA[i:], m.TakerSign)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TakerSign)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.GiverSign) > 0 {
		i -= len(m.GiverSign)
		copy(dAtA[i:], m.GiverSign)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GiverSign)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TakerId) > 0 {
		i -= len(m.TakerId)
		copy(dAtA[i:], m.TakerId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TakerId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GiverId) > 0 {
		i -= len(m.GiverId)
		copy(dAtA[i:], m.GiverId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GiverId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateEventResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateEventResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateEventResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.TypeId) > 0 {
		i -= len(m.TypeId)
		copy(dAtA[i:], m.TypeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TypeId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.UnionId) > 0 {
		i -= len(m.UnionId)
		copy(dAtA[i:], m.UnionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UnionId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TakerSign) > 0 {
		i -= len(m.TakerSign)
		copy(dAtA[i:], m.TakerSign)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TakerSign)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.GiverSign) > 0 {
		i -= len(m.GiverSign)
		copy(dAtA[i:], m.GiverSign)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GiverSign)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TakerId) > 0 {
		i -= len(m.TakerId)
		copy(dAtA[i:], m.TakerId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TakerId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GiverId) > 0 {
		i -= len(m.GiverId)
		copy(dAtA[i:], m.GiverId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GiverId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateEventResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateEventResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateEventResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteEventResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteEventResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteEventResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.GiverId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TakerId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.GiverSign)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TakerSign)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.UnionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TypeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateEventResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgUpdateEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	l = len(m.GiverId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TakerId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.GiverSign)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TakerSign)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.UnionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TypeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateEventResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgDeleteEventResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiverId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GiverId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TakerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiverSign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GiverSign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerSign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TakerSign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateEventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateEventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateEventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiverId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GiverId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TakerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiverSign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GiverSign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerSign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TakerSign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateEventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateEventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateEventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteEventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteEventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteEventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
